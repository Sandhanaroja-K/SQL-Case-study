create database case_study;
use case_study;

select* from Fact;
select* from Product;
select* from Location;


--1. Display the number of states present in the LocationTable.
select count(state)as number_of_states from location;


--2. How many products are of regular type?
select count(product) as regular_type from product 
where type='regular';

--3. How much spending has been done on marketing of product ID 1?
-----modify data_type
alter table fact
alter column marketing int;

select sum(marketing) from fact where ProductId=1;

--4. What is the minimum sales of a product?
select productid, sales as min_sales from fact where sales=(select min(sales)from fact)


--5. Display the max Cost of Good Sold (COGS).
select distinct productid,cogs as max_cogs from fact 
where cogs=(select max(cogs)from fact) 
order by ProductId 

--6. Display the details of the product where product type is coffee.
select * from product where [Product Type]='coffee'

--7. Display the details where total expenses are greater than 40.
select * from fact where Total_Expenses>40

--8. What is the average sales in area code 719?
----alter table fact
----alter column sales int;
select avg(sales)as average_sales from fact where area_code=719

--9. Find out the total profit generated by Colorado state.
----alter table fact alter column profit int;
create view colorado as
select *,[Area Code]as colo_areacode from location where state='colorado';

select sum(profit)as Total_profit_colorado from fact 
where Area_Code in (select [area code] from colorado) 

----or

select sum(profit)as Total_profit_colorado from fact f
inner join location l 
on f.Area_Code=l.[Area Code]
where state='colorado'


--10. Display the average inventory for each product ID.
select productid,avg(inventory )as avg_inventory from fact group by ProductId order by ProductId

------alter table fact
------alter column inventory int


--11. Display state in a sequential order in a Location Table.
select distinct state from location order by state


--12. Display the average budget of the Product where the average budget
--margin should be greater than 100. 
select avg(budget_profit+Budget_COGS)as average_budget,ProductId from fact 
group by productid having avg( Budget_Margin)>100

---or
select avg(budget_margin)as average_budget,ProductId from fact 
group by productid having avg( Budget_Margin)>100

----select* from fact
--13. What is the total sales done on date 2010-01-01?
select sum(sales)as total_sales from fact where date='01-01-2010'


--14. Display the average total expense of each product ID on an individual date.
select date,productid,avg(total_expenses) as avg_totalexp from fact 
group by date,ProductId
order by ProductId,date

--15. Display the table with the following attributes 
--such as date, productID, product_type, product, sales, profit, state, area_code. 

select 
f.date, f.ProductId, p.[product type], p.product, f.sales, f.profit, l.state, l.[Area Code] 
from fact f 
inner join product p on f.productid=p.ProductId 
inner join location l 
on f.area_code=l.[Area Code]
order by productid


--16. Display the rank without any gap to show the sales wise rank. 

select  productid,sales,
dense_rank()over ( order by sales desc)as saleswise_rank
from fact

--17. Find the state wise profit and sales.
select state,sum(profit) as profit,sum(sales)as sales from fact f,location l 
where f.Area_Code=l.[Area Code]
group by state
order by state
------select* from fact

--18. Find the state wise profit and sales along with the productname. 

select l.state,p.product,
sum(f.sales) as total_sales,
sum(f.profit) as total_profit
from fact f
join product p on f.productid = p.productid
join location l on f.Area_Code = l.[Area Code]
GROUP BY l.state, p.product;

--19. If there is an increase in sales of 5%, calculate the increasedsales.
----select* from fact
----select* from product
select sales as currentsales,(sales*1.05)as increasedsales from fact


--20. Find the maximum profit along with the product ID and producttype.
select  f.productid,p.[Product Type],f.profit as max_profit from fact f join product p on f.ProductId=p.ProductId
where profit=(select max(profit)from fact)
--or
select max(profit)as max_profit,p.ProductId,p.product
from fact f
inner join product p 
on f.ProductId=p.ProductId
group by p.ProductId,p.Product

--21. Create a stored procedure to fetch the result according 
--to the product type from Product Table.
create procedure product_type (@product_type varchar(50))
as
begin
select* from Product
where [Product Type]=@product_type
end

exec product_type @product_type='coffee'
exec product_type @product_type='espresso'
exec product_type @product_type='herbal tea'
exec product_type @product_type='tea'
----select* from product

--22. Write a query by creating a condition in which if the total expenses is less than
--60 then it is a profit or else loss.
select productid,total_expenses,
    iif(total_expenses<60,'profit','loss')
	as status from fact



--23. Give the total weekly sales value with the date and product ID details. Use
--roll-up to pull the data in hierarchical order.

select datepart(WEEK,date)as weeknum,
productid,
sum(sales)as weeklysale from fact
group by productid,datepart(WEEK,date) with rollup


--24. Apply union and intersection operator on the tables which consist of
--attribute area code.

select Area_Code from fact
union
select [area code] from Location


select Area_Code from fact
Intersect
select [Area Code] from Location



--25. Create a user-defined function for the product table to fetch a particular
--product type based upon the user’s preference.
create function pro_type(@product_type varchar(50)) 
returns table 
as
return
(
select * from Product
where [Product Type]=@product_type
);
select* from dbo.pro_type('tea')



--26. Change the product type from coffee to tea where product ID is 1 and undo
--it.
begin transaction
  update Product set [Product Type]='tea'where ProductId=1

select*from product;

rollback transaction


--27. Display the date, product ID and sales where total expenses are
--between 100 to 200.
select date,productid,sales from fact where Total_Expenses between 100 and 200


--28. Delete the records in the Product Table for regular type.
delete from product where [Type]='regular' 

select* from Product


--29. Display the ASCII value of the fifth character from the columnProduct

select product type,ascii(substring(product,5,1)) from Product;